{"version":3,"sources":["components/SearchBox.js","components/Card.js","components/CardList.js","components/Scroll.js","containers/App.js","reportWebVitals.js","index.js"],"names":["SearchBox","searchChange","className","type","placeholder","onChange","Card","name","email","id","alt","src","CardList","robots","map","user","i","Scroll","props","style","overflowY","borderTop","height","children","App","onSearchChange","event","setState","searchfield","target","value","state","fetch","then","response","json","users","this","filterRobot","filter","robot","toLowerCase","includes","length","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"0NAeeA,EAbG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,qBAAKC,UAAU,MAAf,SACI,uBACIA,UAAY,mCACZC,KAAK,SACLC,YAAc,mBACdC,SAAUJ,OCMXK,EAbF,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,MAAMC,EAAQ,EAARA,GACvB,OACI,sBAAKP,UAAU,sDAAf,UACA,qBAAKQ,IAAM,SAASC,IAAG,+BAA4BF,EAA5B,cACvB,gCACA,mCAAMF,EAAN,OACA,kCAAKC,EAAL,cCeOI,EApBE,SAAC,GAAY,IAAXC,EAAU,EAAVA,OAEf,OACA,8BAEEA,EAAOC,KAAI,SAACC,EAAKC,GACf,OACC,cAAC,EAAD,CAEGP,GAAII,EAAOG,GAAGP,GACdF,KAAMM,EAAOG,GAAGT,KAChBC,MAAOK,EAAOG,GAAGR,OAHZQ,SCDFC,EARA,SAACC,GACZ,OACI,qBAAKC,MAAO,CAAEC,UAAW,SAAUC,UAAW,kBAAmBC,OAAO,SAAxE,SACKJ,EAAMK,YCuCJC,G,wDArCX,aAAc,IAAD,8BACT,gBAaJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SAbzC,EAAKC,MAAM,CACPlB,OAAO,GACPe,YAAa,IAJR,E,qDAQb,WAAoB,IAAD,OACfI,MAAM,6CACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAQ,EAAKT,SAAS,CAACd,OAAOuB,S,oBAOxC,WAAS,IAAD,EAC0BC,KAAKN,MAA5BlB,EADH,EACGA,OAAQe,EADX,EACWA,YACTU,EAAczB,EAAO0B,QAAO,SAAAC,GAC9B,OAAOA,EAAMjC,KAAKkC,cAAcC,SAASd,EAAYa,kBAEzD,OAAQ5B,EAAO8B,OAGX,sBAAKzC,UAAU,KAAf,UACI,oBAAIA,UAAU,KAAd,2BACA,cAAC,EAAD,CAAWD,aAAcoC,KAAKZ,iBAC9B,cAAC,EAAD,UACI,cAAC,EAAD,CAAUZ,OAAQyB,SANzB,kD,GAzBKM,cCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,IAASC,OAAO,cAAC,EAAD,IAAQC,SAASC,eAAe,SAMhDX,M","file":"static/js/main.4eb23829.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    return(\r\n        <div className='pa2'>\r\n            <input \r\n                className = 'pa3 ba b--green bg-lightest-blue'\r\n                type='search' \r\n                placeholder = 'Search Robots...'\r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Card = ({name, email,id}) => {\r\n    return ( \r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n        <img alt = 'Robots' src = {`https://robohash.org/${id}?200x200`} />\r\n        <div>\r\n        <h2> {name} </h2> \r\n        <p> {email} </p>\r\n        </div> \r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots})=>{\r\n\r\n    return(\r\n    <div>\r\n        {\r\n      robots.map((user,i) => {\r\n        return (\r\n         <Card \r\n            key={i} \r\n            id={robots[i].id} \r\n            name={robots[i].name} \r\n            email={robots[i].email} \r\n        />\r\n        );\r\n        })\r\n        }\r\n    </div>\r\n     );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{ overflowY: 'scroll', borderTop: '1px solid black', height:'800px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\nimport SearchBox from '../components/SearchBox';\r\nimport CardList from '../components/CardList';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\n\r\nclass App extends Component{\r\n    constructor(){\r\n        super()\r\n        this.state={\r\n            robots:[],\r\n            searchfield: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch('http://jsonplaceholder.typicode.com/users')\r\n        .then(response=> response.json())\r\n        .then(users=>{this.setState({robots:users})});\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({searchfield: event.target.value})\r\n    }\r\n\r\n    render(){\r\n        const {robots, searchfield} = this.state;\r\n        const filterRobot = robots.filter(robot=>{\r\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase())\r\n        })\r\n        return !robots.length ?\r\n             <h1> Loading... </h1> :\r\n            (\r\n            <div className='tc'>\r\n                <h1 className='f1'> RoboFriends </h1>\r\n                <SearchBox searchChange={this.onSearchChange}/>\r\n                <Scroll>\r\n                    <CardList robots={filterRobot}/>\r\n                </Scroll>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\nReactDOM.render(<App/>, document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}